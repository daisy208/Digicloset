#!/usr/bin/env python3
import os, sys, json, argparse
from dotenv import load_dotenv
load_dotenv()

OPENAI_KEY = os.getenv('OPENAI_API_KEY')
if not OPENAI_KEY:
    print('Set OPENAI_API_KEY in .env to enable GPT generation (optional).')
    sys.exit(1)

import openai, yaml
openai.api_key = OPENAI_KEY

def load_openapi(path):
    with open(path, 'r') as f:
        if path.endswith('.json'):
            return json.load(f)
        else:
            return yaml.safe_load(f)

def generate_tests(openapi, outdir):
    os.makedirs(outdir, exist_ok=True)
    paths = list(openapi.get('paths', {}).keys())
    prompt = f"Generate pytest tests for these endpoints: {paths}. Keep tests simple and idempotent."
    resp = openai.ChatCompletion.create(model='gpt-4o-mini', messages=[{'role':'user','content':prompt}], max_tokens=1000)
    tests = resp['choices'][0]['message']['content']
    with open(os.path.join(outdir, 'generated_tests.py'), 'w') as f:
        f.write('# AUTOGENERATED TESTS - review before running\n')
        f.write(tests)
    print('Wrote tests to', outdir)

if __name__ == '__main__':
    p = argparse.ArgumentParser()
    p.add_argument('--openapi', required=True)
    p.add_argument('--out', default='./generated_tests')
    args = p.parse_args()
    openapi = load_openapi(args.openapi)
    generate_tests(openapi, args.out)
